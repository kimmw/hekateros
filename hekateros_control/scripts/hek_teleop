#! /usr/bin/env python

###############################################################################
#
# Package:  hekateros
#
# File: hek_teleop
#
## \file 
##
## $LastChangedDate: 2012-12-06 16:33:18 -0700 (Thu, 06 Dec 2012) $
## $Rev: 330 $
##
## \brief Hekatoros teleoporated node.
##
## \author Daniel Packard (daniel@roadnarrows.com)
## \author Robin Knight (robin.knight@roadnarrows.com)
##  
## \par Copyright:
##   (C) 2013.  RoadNarrows LLC.\n
##   (http://www.roadnarrows.com)\n
##   All Rights Reserved
##
# @EulaBegin@
# @EulaEnd@
#
###############################################################################

import sys
import os
import time
import math
import getopt

#from Tkinter import *
#from Tkconstants import *
#from tkFileDialog import *
#import tkFont

#from PIL import Image, ImageTk

#import webbrowser
#import xml.parsers.expat as expat

import roslib; roslib.load_manifest('hekateros_control')
import rospy

from industrial_msgs.msg import RobotMode
from industrial_msgs.msg import TriState

from hekateros_control.calibrate_ac import *
from hekateros_control.msg import HekRobotStatusExtended
from hekateros_control.msg import HekJointStateExtended
from hekateros_control.msg import ServoHealth
from hekateros_control.msg import HekOpState
from hekateros_control.msg import ProductInfo
from hekateros_control.srv import GotoParkedPos
from hekateros_control.srv import GotoBalancedPos
from hekateros_control.srv import GotoZeroPt
from hekateros_control.srv import OpenGripper
from hekateros_control.srv import CloseGripper
from hekateros_control.srv import EStop
from hekateros_control.srv import ResetEStop
from hekateros_control.srv import Freeze
from hekateros_control.srv import Release
from hekateros_control.srv import GetProductInfo
from hekateros_control.srv import SetRobotMode

from hid.msg import Controller360State
from hid.msg import LEDPattern
from hid.srv import SetLED
from hid.srv import SetRumble

import actionlib
import hekateros_control.msg
import control_msgs.msg
import trajectory_msgs.msg


# ------------------------------------------------------------------------------
# Globals
# ------------------------------------------------------------------------------

## \brief Application version. Update as needed. 
appVersion = '1.0.0'

## \brief Image search paths. (future)
imagePath = [
  "/prj/pkg/Hekateros/share/images",
  "/usr/local/share/Hekateros/images",
  "/prj/pkg/appkit/share/images",
  "/usr/local/share/appkit/images"
]

## \brief User's home directory.
home = os.path.expanduser("~")

## \brief Hekateros user-specific configuration directory (in home directory).
hekUserDirName = ".hekateros"

## \brief hek_panel application configuration file name (future).
configFileName = "hek_teleop.xml"

## \brief Configuration default.
configDft = \
{
}

## \brief Common foreground colors.
fgColors = {
  'normal':   'black',
  'ok':       '#008800',
  'focus':    '#0000aa',
  'warning':  '#aa6600',
  'error':    '#cc0000'
}

COLOR_PRE           = '\033['     ##< color escape sequence prefix
COLOR_POST          = '\033[0m'   ##< color escape sequence postfix
COLOR_RED           = '0;31m'     ##< normal red
COLOR_GREEN         = '0;32m'     ##< normal green


# ------------------------------------------------------------------------------
# Utilities
# ------------------------------------------------------------------------------

#
## Round to nearest 100th.
#
def round100th(x):
  return math.floor((x + 0.005) * 100.0) / 100.0

#
## Round to nearest 10th.
#
def round10th(x):
  return math.floor((x + 0.05) * 10.0) / 10.0

#
## Degrees to radians.
#
def degToRad(deg):
  return deg / 180.0 * math.pi

#
## Radians to degrees.
#
def radToDeg(rad):
  return rad / math.pi * 180.0


# ------------------------------------------------------------------------------
# Exception Class usage
# ------------------------------------------------------------------------------

##
## \brief Unit test command-line exception class.
##
## Raise usage excpetion.
##
class usage(Exception):

  ##
  ## \brief Constructor.
  ##
  ## \param msg   Error message string.
  ##
  def __init__(self, msg):
    ## error message attribute
    self.msg = msg


# ------------------------------------------------------------------------------
# Class application
# ------------------------------------------------------------------------------

##
## \brief Hekateros control panel.
##
class application():

  #
  ## \brief Constructor.
  #
  def __init__(self):
    self._Argv0 = __file__
    self.initData()

  #
  ## \brief Print usage error.
  ##
  ## \param emsg  Error message string.
  #
  def printUsageErr(self, emsg):
    if emsg:
      print "%s: %s" % (self._Argv0, emsg)
    else:
      print "%s: error" % (self._Argv0)
    print "Try '%s --help' for more information." % (self._Argv0)

  ## \brief Print Command-Line Usage Message.
  def printUsage(self):
    print \
"""
usage: %s [OPTIONS] <image_dir>

     %s --help

Options and arguments:

-h, --help                : Display this help and exit.
"""  % (self._Argv0, self._Argv0)
 
  #
  ## \brief Get command-line options
  ##  
  ## \param argv          Argument list. If not None, then overrides
  ##                      command-line arguments.
  ## \param [out] kwargs  Keyword argument list.  
  ##
  ## \return Parsed keyword arguments.
  #
  def getOptions(self, argv=None, **kwargs):
    if argv is None:
      argv = sys.argv

    self._Argv0 = kwargs.get('argv0', __file__)

    # defaults
    kwargs['debug'] = 0

    # parse command-line options
    try:
      opts, args = getopt.getopt(argv[1:], "?h",
          ['help', ''])
    except getopt.error, msg:
      raise usage(msg)
    for opt, optarg in opts:
      if opt in ('-h', '--help', '-?'):
        self.printUsage()
        sys.exit(0)

    #if len(args) < 1:
    #  self.printUsageErr("No input xml file specified")
    #  sys.exit(2)
    #else:
    #  kwargs['filename'] = args[0]

    return kwargs

  #
  ## \brief Initialize data
  #
  def initData(self):
    ## \brief XBox button function map in First Person mode.
    self.m_xboxMapFPMode = { \
      'a_button':         self.gotoBalancedPos,
      'b_button':         self.estop,
      'x_button':         self.gotoParkedPos,
      'y_button':         self.gotoZeroPt,

      'dpad_left':        self.noop,
      'dpad_right':       self.noop,
      'dpad_up':          self.noop,
      'dpad_down':        self.noop,

      'back_button':      self.pause,
      'start_button':     self.startResume,
      'center_button':    self.toggleMode,

      'left_joy_click':   self.noop,
      'left_joy_x':       self.noop,
      'left_joy_y':       self.moveFPShoulder,

      'right_joy_click':  self.noop,
      'right_joy_x':      self.rotateBase,
      'right_joy_y':      self.pitchWrist,

      'left_bump':        self.rotateWristCw,
      'right_bump':       self.rotateWristCcw,
      'left_trig':        self.openGripper,
      'right_trig':       self.closeGripper,
    }

    ## \brief XBox button function map in Joint mode.
    self.m_xboxMapJointMode = { \
      'a_button':         self.gotoBalancedPos,
      'b_button':         self.estop,
      'x_button':         self.gotoParkedPos,
      'y_button':         self.gotoZeroPt,

      'dpad_left':        self.prevJoint,
      'dpad_right':       self.nextJoint,
      'dpad_up':          self.noop,
      'dpad_down':        self.noop,

      'back_button':      self.pause,
      'start_button':     self.startResume,
      'center_button':    self.toggleMode,

      'left_joy_click':   self.noop,
      'left_joy_x':       self.noop,
      'left_joy_y':       self.moveOneJoint,

      'right_joy_click':  self.noop,
      'right_joy_x':      self.rotateBase,
      'right_joy_y':      self.pitchWrist,

      'left_bump':        self.rotateWristCw,
      'right_bump':       self.rotateWristCcw,
      'left_trig':        self.openGripper,
      'right_trig':       self.closeGripper,
    }

    # XBox LED patterns
    self.m_xboxLEDOff     = LEDPattern.XBOX_LED_ALL_OFF
    self.m_xboxLEDPaused  = LEDPattern.XBOX_LED_ALL_BLINK
    self.m_xboxLEDFPMode  = LEDPattern.XBOX_LED_ALL_SPIN
    self.m_xboxLEDJoint   = [ LEDPattern.XBOX_LED_1_ON,
                              LEDPattern.XBOX_LED_2_ON,
                              LEDPattern.XBOX_LED_3_ON,
                              LEDPattern.XBOX_LED_4_ON ]
    self.m_xboxLEDEstop   = LEDPattern.XBOX_LED_ALL_SPIN_2

    ## \brief Teleoperation state.
    self.m_teleop = { \
      'op_state':   'uninit',             # operational state
      'mode':       'fp',                 # teleop mode
      'joint':      0,                    # active joint (joint mode only)
      'user_move':  False,                # [not] user control move
      'map':        self.m_xboxMapFPMode, # xbox button-function map
      'xbox':       None                  # previous xbox state
    }
    
    self.m_activeJointName  = ['shoulder', 'elbow']
    self.m_robotStatus      = None
    self.m_jointState       = {}
    self.m_jointTrajectory  = trajectory_msgs.msg.JointTrajectory()
    self.m_jointTrajPoint   = trajectory_msgs.msg.JointTrajectoryPoint()  

    self.dbg = 0

  #
  ## \brief Initialize ROS interface
  #
  def initROSInterface(self):
    rospy.init_node("hek_teleop")

    # subscribe to extended robot status data
    rospy.Subscriber("hekateros_control/robot_status_ex", 
                     HekRobotStatusExtended, 
                     self.updateRobotStatus) 

    # subscribe to extended joint state data
    rospy.Subscriber("hekateros_control/joint_states_ex", 
                     HekJointStateExtended, 
                     self.updateJointStates) 

    # subscribe to XBox 360 controller state
    rospy.Subscriber("xbox_360/controller_360_state",
                     Controller360State,
                     self.updateXbox)

    # subscribe to XBox 360 controller state
    self.m_joint_cmd_pub = rospy.Publisher("hekateros_control/joint_command",
                                        trajectory_msgs.msg.JointTrajectory)

  #
  ## \brief Show information message.
  ##
  ## \param msg   Info message string.
  #
  def showInfo(self, msg):
    print "%s%s%s%s" % (COLOR_PRE, COLOR_GREEN, msg, COLOR_POST)

  #
  ## \brief Show error message.
  ##
  ## \param msg   Error message string.
  #
  def showError(self, msg):
    print "%s%s%s%s" % (COLOR_PRE, COLOR_RED, msg, COLOR_POST)

  #
  ## \brief Run application.
  ##    
  ## \param argv    Optional argument list to override command-line arguments.
  ## \param kwargs  Optional keyword argument list.
  ##
  ## \return Exit code.
  #
  def run(self, argv=None, **kwargs):
  
    # parse command-line options and arguments
    kwargs = self.getOptions(argv, **kwargs)

    # initialize interface
    self.initROSInterface()

    self.showInfo("--- Begin teleoperation, manual operation is paused.")

    rospy.on_shutdown(self.handler)

    rospy.spin()

    return 0

  def handler(self):
    if self.m_robotStatus is not None:
      self.setRobotMode(RobotMode.AUTO)
    self.setLED(self.m_xboxLEDOff)
    self.showInfo("--- End teleoperation.")

  #.............................................................................
  # Subscribed Topics
  #.............................................................................

  #
  ## \brief Received robot extended status message callback.
  ##
  ## \param status  Robot status extended message.
  #
  def updateRobotStatus(self, status):
    # first message
    if self.m_robotStatus is None:
      self.setRobotMode(RobotMode.AUTO)
      oldEStop = TriState.UNKNOWN
    else:
      oldEStop = self.m_robotStatus.e_stopped.val;
    self.m_robotStatus = status;
    if self.m_robotStatus.e_stopped.val != oldEStop:
      self.setTeleopLED()

  #
  ## \brief Received joint extended state message callback.
  ##
  ## \param joint   Received extended joint state message.
  #
  def updateJointStates(self, joint):
    for i in range(0, len(joint.name)):
      self.m_jointState[joint.name[i]] = joint.position[i]

  #
  ## \brief Received joint extended state message callback.
  ##
  ## \param xbox   Received xbox state message.
  #
  def updateXbox(self, xbox):
    if self.m_teleop['op_state'] == 'ready':
      self.execButton(xbox)
    elif self.m_teleop['op_state'] == 'paused':
      if xbox.start_button != self.m_teleop['xbox'].start_button:
        self.startResume('start_button', xbox)
    elif self.m_teleop['op_state'] == 'uninit':
      self.m_teleop['op_state'] = 'paused'
      self.setTeleopLED()
    self.m_teleop['xbox'] = xbox

  #.............................................................................
  # Execution and Support
  #.............................................................................

  def execButton(self, xbox):
    self.initTrajectory()
    for bttn, func in self.m_teleop['map'].items():
      func(bttn, xbox)
    if self.canMove():
      if len(self.m_jointTrajectory.joint_names) > 0:
        self.m_teleop['user_move'] = True
        self.m_jointTrajectory.points.append(self.m_jointTrajPoint)
        self.moveRobot(self.m_jointTrajectory)
      elif self.m_robotStatus.in_motion.val == TriState.ON and \
          self.m_teleop['user_move']:
        self.stopRobot()
        self.m_teleop['user_move'] = False

  def getButton(self, bttn, xbox):
    return xbox.__getattribute__(bttn)

  def buttonOffToOn(self, bttn, xbox):
    newState = self.getButton(bttn, xbox)
    oldState = self.getButton(bttn, self.m_teleop['xbox'])
    if newState and newState != oldState:
      return True
    else:
      return False

  def ready(self):
    if self.m_teleop['op_state'] != 'ready':
      return False
    elif self.m_robotStatus is None:
      return False
    else:
      return True

  def canMove(self):
    if not self.ready():
      return False
    elif self.m_robotStatus is None:
      return False
    elif self.m_robotStatus.is_calibrated.val != TriState.TRUE:
      return False
    elif self.m_robotStatus.e_stopped.val == TriState.TRUE:
      return False
    elif len(self.m_jointState) == 0:
      return False
    else:
      return True

  def setLED(self, pattern):
    try:
      rospy.wait_for_service("xbox_360/set_led", timeout=1)
    except rospy.ROSException, e:
      self.showError('SetLED: ' + e.message + '.')
      return
    try:
      set_led = rospy.ServiceProxy('xbox_360/set_led', SetLED)
      req = LEDPattern()
      req.val = pattern
      set_led(req)
    except rospy.ServiceException, e:
      self.showError("SetLED request failed: %s." % (e.message))
      return

  def setTeleopLED(self):
    if self.m_teleop['op_state'] == 'paused':
      self.setLED(self.m_xboxLEDPaused)
    elif  self.m_robotStatus is not None and \
          self.m_robotStatus.e_stopped.val == TriState.TRUE:
      self.setLED(self.m_xboxLEDEStop)
    elif self.m_teleop['mode'] == 'fp':
      self.setLED(self.m_xboxLEDFPMode)
    elif self.m_teleop['mode'] == 'joint':
      self.setLED(self.m_xboxLEDJoint[self.m_teleop['joint']])
    else:
      self.setLED(self.m_xboxLEDOff)

  def initTrajectory(self):
    self.m_jointTrajectory  = trajectory_msgs.msg.JointTrajectory()
    self.m_jointTrajPoint   = trajectory_msgs.msg.JointTrajectoryPoint()  
    #self.m_jointTrajectory.joint_names  = []
    #self.m_jointTrajectory.points       = []
    #self.m_jointTrajPoint.positions     = []
    #self.m_jointTrajPoint.velocities    = []

  def addTrajectoryJoint(self, jointName):
    if not self.m_jointState.has_key(jointName):
      return -1
    try:
      i = self.m_jointTrajectory.joint_names.index(jointName)
    except ValueError:
      self.m_jointTrajectory.joint_names.append(jointName)
      self.m_jointTrajPoint.positions.append(self.m_jointState[jointName])
      self.m_jointTrajPoint.velocities.append(0.0)
      self.m_jointTrajPoint.accelerations.append(0.0)
      i = self.m_jointTrajectory.joint_names.index(jointName)
    return i

  def setRobotMode(self, robotMode):
    try:
      rospy.wait_for_service("hekateros_control/set_robot_mode", timeout=1)
    except rospy.ROSException, e:
      self.showError('Set robot mode: ' + e.message + '.')
      return
    try:
      set_robot_mode = rospy.ServiceProxy('hekateros_control/set_robot_mode', 
                                        SetRobotMode)
      req = RobotMode()
      req.val = robotMode
      set_robot_mode(req)
    except rospy.ServiceException, e:
      self.showError("Set robot mode failed: %s." % (e.message))
      return
    self.showInfo("Set robot mode to %d." % (robotMode))

  def moveRobot(self, trajectory):
    try:
      self.m_joint_cmd_pub.publish(trajectory)
    except rospy.ROSException, e:
      self.showError('joint_command: ' + e.message + '.')

  def stopRobot(self):
    try:
      rospy.wait_for_service("hekateros_control/freeze", timeout=1)
    except rospy.ROSException, e:
      self.showError('Freeze arm: ' + e.message + '.')
      return
    try:
      freeze = rospy.ServiceProxy('hekateros_control/freeze', Freeze)
      freeze()
    except rospy.ServiceException, e:
      self.showError("Freeze arm request failed: %s." % (e.message))
      return

  #.............................................................................
  # XBox Button Associated Functions
  #.............................................................................

  def noop(self, bttn, xbox):
    pass

  def pause(self, bttn, xbox):
    if self.buttonOffToOn(bttn, xbox):
      self.m_teleop['op_state'] = 'paused'
      self.setTeleopLED()
      self.setRobotMode(RobotMode.AUTO)
      self.showInfo("Manual operation paused, auto mode enabled.")

  def startResume(self, bttn, xbox):
    if self.m_robotStatus is None:
      return
    elif self.buttonOffToOn(bttn, xbox):
      if self.m_teleop['mode'] == 'fp':
        mode = "first person mode."
      else:
        mode = "joint mode."
      self.m_teleop['op_state'] = 'ready'
      self.setTeleopLED()
      self.setRobotMode(RobotMode.MANUAL)
      self.showInfo("Manual operation active, auto mode disabled, " + mode)

  def toggleMode(self, bttn, xbox):
    if not self.ready():
      return
    elif self.buttonOffToOn(bttn, xbox):
      if self.m_teleop['mode'] == 'fp':
        self.m_teleop['mode'] = 'joint'
        self.m_teleop['map'] = self.m_xboxMapJointMode 
        self.showInfo("Joint mode.")
      else:
        self.m_teleop['mode'] = 'fp'
        self.m_teleop['map'] = self.m_xboxMapFPMode 
        self.showInfo("First person mode.")
      self.setTeleopLED()

  #
  ## \brief Go to parked position callback.
  #
  def gotoParkedPos(self, bttn, xbox):
    if not self.buttonOffToOn(bttn, xbox):
      return
    elif not self.canMove():
      return
    try:
      rospy.wait_for_service("hekateros_control/goto_parked", timeout=1)
    except rospy.ROSException, e:
      self.showError('Goto parked position: ' + e.message + '.')
      return
    try:
      goto_parked_pos = rospy.ServiceProxy('hekateros_control/goto_parked', 
                                        GotoParkedPos)
      goto_parked_pos()
    except rospy.ServiceException, e:
      self.showError("Goto parked position request failed: %s." % (e.message))
      return
    self.m_teleop['user_move'] = False
    self.showInfo("Go to parked position.")
  
  #
  ## \brief Go to balanced position callback.
  #
  def gotoBalancedPos(self, bttn, xbox):
    if not self.buttonOffToOn(bttn, xbox):
      return
    elif not self.canMove():
      return
    try:
      rospy.wait_for_service("hekateros_control/goto_balanced", timeout=1)
    except rospy.ROSException, e:
      self.showError('Goto balanced position: ' + e.message + '.')
      return
    try:
      goto_balanced_pos = rospy.ServiceProxy(
                                        'hekateros_control/goto_balanced', 
                                        GotoBalancedPos)
      goto_balanced_pos()
    except rospy.ServiceException, e:
      self.showError("Goto balanced position request failed: %s." % (e.message))
      return
    self.m_teleop['user_move'] = False
    self.showInfo("Go to balanced position.")
  
  #
  ## \brief Go to zero point position callback.
  #
  def gotoZeroPt(self, bttn, xbox):
    if not self.buttonOffToOn(bttn, xbox):
      return
    if not self.canMove():
      return
    try:
      rospy.wait_for_service("hekateros_control/goto_zero", timeout=1)
    except rospy.ROSException, e:
      self.showError('Goto zero point: ' + e.message + '.')
      return
    try:
      goto_zero_pt = rospy.ServiceProxy('hekateros_control/goto_zero', 
                                        GotoZeroPt)
      goto_zero_pt()
    except rospy.ServiceException, e:
      self.showError("Goto zero point failed: %s." % (e.message))
      return
    self.m_teleop['user_move'] = False
    self.showInfo("Go to Zero Point.")
  
  #
  ## \brief (Reset) emergency stop callback.
  #
  def estop(self, bttn, xbox):
    if not self.buttonOffToOn(bttn, xbox):
      return
    elif not self.ready():
      return
    if self.m_robotStatus.e_stopped.val != TriState.TRUE:
      try:
        rospy.wait_for_service("hekateros_control/estop", timeout=1)
      except rospy.ROSException, e:
        self.showError('Emergency stop: ' + e.message + '.')
        return
      try:
        estop = rospy.ServiceProxy('hekateros_control/estop',
                                          EStop)
        estop()
      except rospy.ServiceException, e:
        self.showError("Emergency stop request failed: %s." % (e.message))
        return
      self.setLED(self.m_xboxLEDEStop)
      self.showError("Hekateros emergency stopped.")
    else:
      try:
        rospy.wait_for_service("hekateros_control/reset_estop", timeout=1)
      except rospy.ROSException, e:
        self.showError('Reset emergency stop: ' + e.message + '.')
        return
      try:
        reset_estop = rospy.ServiceProxy('hekateros_control/reset_estop',
                                          ResetEStop)
        reset_estop()
      except rospy.ServiceException, e:
        self.showError("Reset emergency stop request failed: %s." % (e.message))
        return
      self.showInfo("Hekateros emergency stop has been reset.")
      self.setTeleopLED()
  
  def moveFPShoulder(self, bttn, xbox):
    pass

  def moveOneJoint(self, bttn, xbox):
    joy = self.getButton(bttn, xbox)
    if joy == 0:
      return
    jointName = self.m_activeJointName[self.m_teleop['joint']]
    i = self.addTrajectoryJoint(jointName)
    if i < 0:   # no joint
      return
    velocity = joy/32767.0 * 10.0
    position = 40.0
    if velocity < 0.0:
      position = -position
      velocity = -velocity
    self.m_jointTrajPoint.positions[i] += degToRad(position)
    self.m_jointTrajPoint.velocities[i] = velocity

  def rotateBase(self, bttn, xbox):
    joy = self.getButton(bttn, xbox)
    if joy == 0:
      return
    i = self.addTrajectoryJoint('base_rot')
    if i < 0:   # no joint
      return
    velocity = joy/32767.0 * 20.0
    position = 45.0
    if velocity < 0.0:
      position = -position
      velocity = -velocity
    self.m_jointTrajPoint.positions[i] += degToRad(position)
    self.m_jointTrajPoint.velocities[i] = velocity

  def pitchWrist(self, bttn, xbox):
    joy = self.getButton(bttn, xbox)
    if joy == 0:
      return
    i = self.addTrajectoryJoint('wrist_pitch')
    if i < 0:   # no joint
      return
    velocity = joy/32767.0 * 20.0
    position = 45.0
    if velocity < 0.0:
      position = -position
      velocity = -velocity
    self.m_jointTrajPoint.positions[i] += degToRad(position)
    self.m_jointTrajPoint.velocities[i] = velocity

  def rotateWristCw(self, bttn, xbox):
    if self.getButton(bttn, xbox) == 0:
      return
    i = self.addTrajectoryJoint('wrist_rot')
    if i < 0:   # no joint
      return
    self.dbg += 1
    if self.dbg % 3 != 0:
      return
    self.m_jointTrajPoint.positions[i] -= degToRad(50.0)
    self.m_jointTrajPoint.velocities[i] = 20.0
    self.showInfo("cw wrist to %f at %f." % (radToDeg(self.m_jointTrajPoint.positions[i]), self.m_jointTrajPoint.velocities[i]))

  def rotateWristCcw(self, bttn, xbox):
    if self.getButton(bttn, xbox) == 0:
      return
    i = self.addTrajectoryJoint('wrist_rot')
    if i < 0:   # no joint
      return
    self.m_jointTrajPoint.positions[i] += degToRad(50.0)
    self.m_jointTrajPoint.velocities[i] = 20.0
    self.showInfo("ccw wrist to %f at %f." % (radToDeg(self.m_jointTrajPoint.positions[i]), self.m_jointTrajPoint.velocities[i]))

  #
  ## \brief Open gripper callback.
  #
  def openGripper(self, bttn, xbox):
    deadzone = 10
    trigger = self.getButton(bttn, xbox)
    if trigger < deadzone: # dead zone
      return
    i = self.addTrajectoryJoint('grip')
    if i < 0:   # no joint
      return
    velocity = (trigger-deadzone)/255.0 * 10.0
    self.m_jointTrajPoint.positions[i] += degToRad(35.0)
    self.m_jointTrajPoint.velocities[i] = velocity
  
  #
  ## \brief Close gripper callback.
  #
  def closeGripper(self, bttn, xbox):
    deadzone = 10
    trigger = self.getButton(bttn, xbox)
    if trigger < deadzone: # dead zone
      return
    i = self.addTrajectoryJoint('grip')
    if i < 0:   # no joint
      return
    velocity = (trigger-deadzone)/255.0 * 10.0
    self.m_jointTrajPoint.positions[i] -= degToRad(35.0)
    self.m_jointTrajPoint.velocities[i] = velocity

  def prevJoint(self, bttn, xbox):
    if not self.buttonOffToOn(bttn, xbox):
      return
    self.m_teleop['joint'] -= 1
    if self.m_teleop['joint'] < 0:
      self.m_teleop['joint'] = 1
    self.setTeleopLED()
    self.showInfo("Joint %d control." % (self.m_teleop['joint']))

  def nextJoint(self, bttn, xbox):
    if not self.buttonOffToOn(bttn, xbox):
      return
    self.m_teleop['joint'] += 1
    if self.m_teleop['joint'] > 1:
      self.m_teleop['joint'] = 0
    self.setTeleopLED()
    self.showInfo("Joint %d control." % (self.m_teleop['joint']))


# ------------------------------------------------------------------------------
# main
# ------------------------------------------------------------------------------
if __name__ == '__main__':
  app = application();
  sys.exit( app.run() );
