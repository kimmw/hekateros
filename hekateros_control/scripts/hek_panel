#! /usr/bin/env python

###############################################################################
#
# Package:  hekateros
#
# File: hek_panel
#
## \file 
##
## $LastChangedDate: 2012-12-06 16:33:18 -0700 (Thu, 06 Dec 2012) $
## $Rev: 330 $
##
## \brief Graphical panel to interface with the hekateros_control node.
##
## \author Daniel Packard (daniel@roadnarrows.com)
## \author Robin Knight (robin.knight@roadnarrows.com)
##  
## \par Copyright:
##   (C) 2013.  RoadNarrows LLC.\n
##   (http://www.roadnarrows.com)\n
##   All Rights Reserved
##
# @EulaBegin@
# @EulaEnd@
#
###############################################################################

import sys
import os
import time
import math
import getopt

from Tkinter import *
from Tkconstants import *
from tkFileDialog import *
import tkFont

from PIL import Image, ImageTk

import webbrowser

import roslib; roslib.load_manifest('hekateros_control')
import rospy

from industrial_msgs.msg import RobotMode
from industrial_msgs.msg import TriState

from hekateros_control.calibrate_ac import *
from hekateros_control.msg import HekRobotStatusExtended
from hekateros_control.msg import HekJointStateExtended
from hekateros_control.msg import ServoHealth
from hekateros_control.msg import HekOpState
from hekateros_control.msg import ProductInfo
from hekateros_control.srv import GotoParkedPos
from hekateros_control.srv import GotoBalancedPos
from hekateros_control.srv import GotoZeroPt
from hekateros_control.srv import OpenGripper
from hekateros_control.srv import CloseGripper
from hekateros_control.srv import GetProductInfo

import actionlib
import hekateros_control.msg
import trajectory_msgs.msg

## \brief Image search paths.
imagePath = [
  "/prj/pkg/Hekateros/share/images",
  "/usr/local/share/Hekateros/images",
  "/prj/pkg/appkit/share/images",
  "/usr/local/share/appkit/images"
]

## \brief Alarm strings.
alarmStrings = {
  ServoHealth.ALARM_NONE:         "ok",
  ServoHealth.ALARM_VOLTAGE:      "V",
  ServoHealth.ALARM_ANGLE:        "pos",
  ServoHealth.ALARM_TEMP:         "T",
  ServoHealth.ALARM_CMD_RANGE:    "",
  ServoHealth.ALARM_CHECKSUM:     "",
  ServoHealth.ALARM_LOAD:         "load",
  ServoHealth.ALARM_INSTRUCTION:  ""
}

## \brief Common foreground colors.
fgColors = {
  'normal':   'black',
  'ok':       '#008800',
  'focus':    '#0000aa',
  'warning':  '#aa6600',
  'error':    '#cc0000'
}


# ------------------------------------------------------------------------------
# Utilities
# ------------------------------------------------------------------------------

#
## \brief Load icon image from file name.
##
## \param filename    Icon file name.
##
## \return Returns icon widget on success, None on failure.
#
def loadIcon(filename):
  # no file name
  if filename is None or len(filename) == 0:
    return None;
  # absolute file name
  if filename[0] == os.path.sep:
    try:
      return ImageTk.PhotoImage(Image.open(filename))
    except IOError:
      return None
  # relative file name - search path for file
  for path in imagePath:
    fqname = path + os.path.sep + filename
    try:
      return ImageTk.PhotoImage(Image.open(fqname))
    except IOError:
      continue
  return None


# ------------------------------------------------------------------------------
# Class warnDlg
# ------------------------------------------------------------------------------

class warnDlg(Toplevel):
  #
  ## \brief Constructor.
  ##
  ## \param cnf     Configuration dictionary.
  ## \param kw      Keyword options.
  #
  def __init__(self, master=None, cnf={}, **kw):
    # initialize dialog data
    kw = self.initData(kw)

    Toplevel.__init__(self, master=master, cnf=cnf, **kw)
    self.title(self.m_title)

    # create and show widgets
    self.createWidgets()

    # allows the enter button to fire either button's action
    self.m_bttnCancel.bind('<KeyPress-Return>', func=self.close)

    # center the dialog over parent panel
    if master is not None:
      self.update_idletasks()
      x0 = master.winfo_rootx()
      y0 = master.winfo_rooty()
      xp = x0 + (master.winfo_width() - self.winfo_width()) / 2 - 8
      yp = y0 + (master.winfo_height() - self.winfo_height()) / 2 - 20
      glist = [self.winfo_width(), self.winfo_height(), xp, yp]
      #self.withdraw() # hide the dialog until position and size is set
      self.geometry('{0}x{1}+{2}+{3}'.format(*glist))
      #self.deiconify() # now show

    # allows us to customize what happens when the close button is pressed
    self.protocol("WM_DELETE_WINDOW", self.close)

    #
    # Modal diagle settings.
    #
    # set the focus on dialog window (needed on Windows)
    self.focus_set()

    # make sure events only go to our dialog
    self.grab_set()

    # make sure dialog stays on top of its parent window (if needed)
    self.transient(master)

    # isplay the window and wait for it to close
    self.wait_window(self)

  #
  ## \brief Initialize class state data.
  ##
  ## \param kw      Keyword options.
  ##
  ## \return Modified keywords sans this specific class.
  ##
  def initData(self, kw):
    self.m_icons          = {}    # must keep loaded icons referenced
    if kw.has_key('title'):
      self.m_title = kw['title']
      del kw['title']
    else:
      self.m_title = "Warning"
    if kw.has_key('image'):
      self.m_icons['image'] = loadIcon(kw['image'])
      del kw['image']
    else:
      self.m_icons['image'] = None
    if kw.has_key('msg'):
      self.m_msg = kw['msg']
      del kw['msg']
    else:
      self.m_msg = "Warn what???"
    self.m_result = False
    return kw

  #
  ## \brief Create gui widgets with supporting data and show.
  #
  def createWidgets(self):
    frame = Frame(self)
    frame.grid(row=0, column=0)

    # warning image 
    w = Label(frame)
    if self.m_icons['image'] is not None:
      w = Label(frame)
      w['image']  = self.m_icons['image']
    w['anchor'] = CENTER
    w.grid(row=0, column=0, rowspan=2, sticky=W+N+S)

    # top heading
    w = Label(frame)
    helv = tkFont.Font(family="Helvetica",size=24,weight="bold")
    w['font']   = helv
    w['text']   = 'Warning'
    w['anchor'] = CENTER
    w.grid(row=0, column=1, sticky=E+W)

    row = 1

    # warning message
    w = Label(frame)
    w['text']   = self.m_msg
    w['anchor'] = W
    w['justify'] = LEFT
    w.grid(row=row, column=1, padx=5, sticky=E+W)

    row += 1

    wframe = Frame(frame)
    wframe.grid(row=row, column=1)

    # cancel button
    w = Button(wframe, width=10, text='Cancel', command=self.close)
    w.grid(row=0, column=0, pady=5)
    w['anchor']  = CENTER
    self.m_bttnCancel = w

    # ok button
    w = Button(wframe, width=10, text='Continue', command=self.ok)
    w.grid(row=0, column=1, pady=5)
    w['anchor']  = CENTER
    self.m_bttnContinue = w

  #
  ## \brief Destroy window callback.
  #
  def ok(self):
    self.m_result = True
    self.close()

  #
  ## \brief Destroy window callback.
  #
  def close(self):
    self.destroy()


# ------------------------------------------------------------------------------
# Class aboutDlg
# ------------------------------------------------------------------------------

class aboutDlg(Toplevel):
  #
  ## \brief Constructor.
  ##
  ## \param cnf     Configuration dictionary.
  ## \param kw      Keyword options.
  #
  def __init__(self, master=None, cnf={}, **kw):
    # initialize dialog data
    kw = self.initData(kw)

    Toplevel.__init__(self, master=master, cnf=cnf, **kw)
    self.title("About Hekateros")

    # create and show widgets
    self.createWidgets()

    # allows the enter button to fire either button's action
    self.m_bttnOk.bind('<KeyPress-Return>', func=self.close)

    # center the dialog over parent panel
    if master is not None:
      self.update_idletasks()
      x0 = master.winfo_rootx()
      y0 = master.winfo_rooty()
      xp = x0 + (master.winfo_width() - self.winfo_width()) / 2 - 8
      yp = y0 + (master.winfo_height() - self.winfo_height()) / 2 - 20
      glist = [self.winfo_width(), self.winfo_height(), xp, yp]
      #self.withdraw() # hide the dialog until position and size is set
      self.geometry('{0}x{1}+{2}+{3}'.format(*glist))
      #self.deiconify() # now show

    # start with ok button focused
    #self.m_bttnOk.focus_set()

    # allows us to customize what happens when the close button is pressed
    self.protocol("WM_DELETE_WINDOW", self.close)

    #
    # Modal diagle settings.
    #
    # set the focus on dialog window (needed on Windows)
    self.focus_set()

    # make sure events only go to our dialog
    self.grab_set()

    # make sure dialog stays on top of its parent window (if needed)
    self.transient(master)

    # isplay the window and wait for it to close
    self.wait_window(self)

  #
  ## \brief Initialize class state data.
  ##
  ## \param kw      Keyword options.
  ##
  ## \return Modified keywords sans this specific class.
  ##
  def initData(self, kw):
    self.m_icons          = {}    # must keep loaded icons referenced
    self.m_prodName       = "Hekateros"
    self.m_hwVer          = "1.0.0"
    self.m_prodId         = 0x00
    self.m_prodBrief      = "Hekateros Robotic Manipulator"
    self.m_rnUrl          = "http://www.roadnarrows.com/Hekateros"
    self.m_rnEmail        = "support@roadnarrows.com"
    self.m_rnTel          = "+1.800.275.9568"
    if kw.has_key('info'):
      info = kw['info']
      if info is not None:
        self.m_hwVer = info.version_string
        self.m_prodName = info.product_name
        self.m_prodId = info.product_id
        self.m_prodBrief = info.desc
      del kw['info']
    return kw

  #
  ## \brief Create gui widgets with supporting data and show.
  #
  def createWidgets(self):
    frame = Frame(self)
    frame.grid(row=0, column=0)

    self.m_icons['hek_logo'] = loadIcon("HekaterosLogo.png")

    # top heading
    w = Label(frame)
    times32 = tkFont.Font(family="Times",size=32,weight="bold")
    w['font']   = times32
    w['text']   = 'Hekateros'
    w['anchor'] = W
    w.grid(row=0, column=1, columnspan=2, sticky=E+W)

    lwidth = 10
    rwidth = 26

    row = 1

    # product brief
    w = Label(frame)
    w['text']   = self.m_prodBrief
    w['anchor'] = W
    w['width']  = rwidth
    w.grid(row=row, column=1, columnspan=2, padx=2, sticky=W)

    row += 1

    # product name
    w = Label(frame)
    w['text']   = 'Product:'
    w['anchor'] = W
    w['width'] = lwidth
    w.grid(row=row, column=1, padx=2, sticky=W)

    w = Label(frame)
    w['text']   = self.m_prodName
    w['anchor'] = W
    w['width']  = rwidth
    w.grid(row=row, column=2, padx=2, sticky=W)

    row += 1

    # product id
    w = Label(frame)
    w['text']   = 'Product Id:'
    w['anchor'] = W
    w['width'] = lwidth
    w.grid(row=row, column=1, padx=2, sticky=W)

    w = Label(frame)
    w['text']   = "%08x" % (self.m_prodId)
    w['anchor'] = W
    w['width']  = rwidth
    w.grid(row=row, column=2, padx=2, sticky=W)

    row += 1

    # hw version
    w = Label(frame)
    w['text']   = 'HW Version:'
    w['anchor'] = W
    w['width'] = lwidth
    w.grid(row=row, column=1, padx=2, sticky=W)

    w = Label(frame)
    w['text']   = self.m_hwVer
    w['anchor'] = W
    w['width']  = rwidth
    w.grid(row=row, column=2, padx=2, sticky=W)

    row += 1

    # url
    w = Label(frame)
    w['text']   = 'URL:'
    w['anchor'] = W
    w['width'] = lwidth
    w.grid(row=row, column=1, padx=2, sticky=W)

    w = Button(frame)
    w['text']   = 'www.roadnarrows.com/Hekateros'
    w['fg']   = '#aa0000'
    w['activeforeground']   = '#cc0033'
    w['activebackground']   = w['bg']
    w['cursor'] = 'hand1'
    w['anchor'] = W
    w['justify'] = LEFT
    w['relief']   = 'flat'
    w['borderwidth']   = 0
    w['padx']   = 0
    w['pady']   = 0
    w['width']  = rwidth
    w['command']  = lambda aurl=self.m_rnUrl:webbrowser.open_new(self.m_rnUrl)
    w.grid(row=row, column=2, ipadx=0, ipady=0, padx=2, pady=0, sticky=W)

    row += 1

    # support email
    w = Label(frame)
    w['text']   = 'Email:'
    w['anchor'] = W
    w['width'] = lwidth
    w.grid(row=row, column=1, padx=2, sticky=W)

    w = Label(frame)
    w['text']   = self.m_rnEmail
    w['anchor'] = W
    w['width']  = rwidth
    w.grid(row=row, column=2, padx=2, sticky=W)

    row += 1

    # telephone
    w = Label(frame)
    w['text']   = 'Tel:'
    w['anchor'] = W
    w['width'] = lwidth
    w.grid(row=row, column=1, padx=2, sticky=W)

    w = Label(frame)
    w['text']   = self.m_rnTel
    w['anchor'] = W
    w['width']  = rwidth
    w.grid(row=row, column=2, padx=2, sticky=W)

    row += 1

    # product logo
    w = Label(frame)
    if self.m_icons['hek_logo'] is not None:
      w['image']  = self.m_icons['hek_logo']
    w['anchor'] = CENTER
    w.grid(row=0, column=0, rowspan=row, sticky=W+N+S)

    # who
    w = Label(frame)
    w['text']   = """
Hekateros is designed and developed by RoadNarrows, a robotics and intelligent systems
company base in Colorado USA. We are dedictated to supporting open software and
hardware interfaces to foster a global community of users and developers."""
    w['justify'] = LEFT
    w['anchor'] = W
    w.grid(row=row, column=0, columnspan=3, padx=5, sticky=W)

    row += 1

    # ok button
    w = Button(frame, width=10, text='OK', command=self.close)
    w.grid(row=row, column=0, columnspan=3, pady=5)
    w['anchor']  = CENTER
    self.m_bttnOk = w

    row += 1

    # legal
    w = Label(frame)
    helv8 = tkFont.Font(family="Helvetica",size=8)
    w['font']   = helv8
    w['anchor'] = W
    w['fg']     = '#666666'
    w['text']   = "Hekateros and the Hekateros logos are the trademarks of " \
                  "RoadNarrows LLC"
    w.grid(row=row, column=0, columnspan=3, pady=5)

  #
  ## \brief Destroy window callback.
  #
  def close(self):
    self.destroy()


# ------------------------------------------------------------------------------
# Class window
# ------------------------------------------------------------------------------

##
## \brief Window class supporting application.
##
class window(Frame):
  #
  ## \brief Constructor.
  ##
  ## \param master  Window parent master widget.
  ## \param cnf     Configuration dictionary.
  ## \param kw      Keyword options.
  #
  def __init__(self, master=None, cnf={}, **kw):
    # intialize window data
    kw = self.initData(**kw)

    Frame.__init__(self, master=master, cnf=cnf, **kw)
    self.master.title("Hekateros Control Panel")
    self.grid(row=0, column=0, padx=5, pady=5)

    # craete and show widgets
    self.createWidgets()

  #
  ## \brief Initialize class state data.
  ##
  ## Any keywords for this application specific window that are not supported 
  ## by the Frame Tkinter class must be removed.
  ##
  ## \param kw      Keyword options.
  ##
  ## \return Modified keywords sans this specific class.
  #
  def initData(self, **kw):
                                  # application configuration
    self.m_config         = \
      {
        'warn_on_calib':    True, # do [not] warn user at calibration start
        'warn_on_release':  True, # do [not] warn user on release
      }
    self.m_icons          = {}    # must keep loaded icons referenced
    self.m_wBttn          = {}    # button widgets
    self.m_keysCalibDeps  = []    # gui button keys depending on calibration
    self.m_keysModeDeps   = []    # gui button keys depending on robot mode
    self.m_robotStatus    = {}    # robot status widgets, variables, and values
    self.m_robotJoint     = {}    # robot joint state widgets, variables, etc.
    self.m_robotServo     = {}    # master servo to joint name map
                                  # calibration state
    self.m_calibState     = \
      {
        'calibrating':  False,    # [not] calibrating
        'ac':           None,     # calibration action client
        'id':           0         # after id
      }
    self.m_results        = None
    return kw

  #
  ## \brief Create gui widgets with supporting data and show.
  #
  def createWidgets(self):
    self.createHeading()
    self.createLeftButtons()
    self.createCenterPanel()
    self.createRightButtons()
    self.createStatusBar()

  #
  ## \brief Create top gui heading.
  #
  def createHeading(self):
    # rn logo
    w = Label(self)
    self.m_icons['rn_logo'] = loadIcon("RNLogo48.png");
    if self.m_icons['rn_logo']:
      w['image'] = self.m_icons['rn_logo']
    else:
      w['text'] = 'rn'
      w['anchor'] = W
      w['width'] = 5
    w.grid(row=0, column=0, sticky=W)
    
    # top heading
    w = Label(self)
    w['font']   = ('Helvetica', 16)
    w['text']   = 'Hekateros'
    w['anchor'] = CENTER
    w.grid(row=0, column=1, sticky=E+W)

    # hek logo
    w = Label(self)
    self.m_icons['hek_logo'] = loadIcon("icons/icon_hek_logo.png");
    if self.m_icons['hek_logo']:
      w['image'] = self.m_icons['hek_logo']
      w['anchor'] = E
    else:
      w['text'] = 'hek'
      w['anchor'] = E
      w['width'] = 5
    w.grid(row=0, column=2, sticky=E)
    
  #
  ## \brief Create gui left hand side buttons.
  #
  def createLeftButtons(self):
    wframe = Frame(self)
    wframe['borderwidth'] = 2
    wframe['relief'] = 'ridge'
    wframe.grid(row=1, column=0, padx=1, pady=3, sticky=N+W+E)

    # calibrate
    w = self.createButton(wframe, "Calibrate", "icons/icon_calib.png",
                            self.calibrate)
    w.grid(row=0, column=0, sticky=N+E+W)
    self.m_icons['calibrate_cancel'] = loadIcon("icons/icon_calib_cancel.png")
    self.m_keysModeDeps.append('calibrate')

    # park
    w = self.createButton(wframe, "Park", "icons/icon_hek_park.png",
                            self.gotoParkedPos)
    w.grid(row=1, column=0, sticky=N+E+W)
    self.m_keysCalibDeps.append('park')
    self.m_keysModeDeps.append('park')

    # balance
    w = self.createButton(wframe, "Balance", "icons/icon_hek_balance.png",
                            self.gotoBalancedPos)
    w.grid(row=2, column=0, sticky=N+E+W)
    self.m_keysCalibDeps.append('balance')
    self.m_keysModeDeps.append('balance')

    # zero point
    w = self.createButton(wframe, "Zero\nPoint", "icons/icon_hek_zeropt.png",
                            self.gotoZeroPt)
    w.grid(row=3, column=0, sticky=N+E+W)
    self.m_keysCalibDeps.append('zero_point')
    self.m_keysModeDeps.append('zero_point')

    # open gripper
    w = self.createButton(wframe, "Open\nGripper",
                                  "icons/icon_gripper_open.png",
                                  self.openGripper)
    w.grid(row=4, column=0, sticky=N+E+W)
    self.m_keysCalibDeps.append('open_gripper')
    self.m_keysModeDeps.append('open_gripper')

    # close gripper
    w = self.createButton(wframe, "Close\nGripper",
                                  "icons/icon_gripper_close.png",
                                  self.closeGripper)
    w.grid(row=5, column=0, sticky=N+E+W)
    self.m_keysCalibDeps.append('close_gripper')
    self.m_keysModeDeps.append('close_gripper')

  #
  ## \brief Create robot status and joint state center panel.
  #
  def createCenterPanel(self):
    self.m_wPanelFrame = Frame(self)
    self.m_wPanelFrame['borderwidth'] = 2
    self.m_wPanelFrame['relief'] = 'ridge'
    self.m_wPanelFrame.grid(row=1, column=1, padx=1, pady=3, sticky=N+W+E)

    self.createRobotStatusPanel(self.m_wPanelFrame)
    self.createJointStatePanelHdr(self.m_wPanelFrame)

  #
  ## \brief Create robot status upper center panel.
  ##
  ## \param parent  Parent widget
  #
  def createRobotStatusPanel(self, parent):
    wframe = Frame(parent)
    wframe['borderwidth'] = 2
    wframe['relief'] = 'ridge'
    wframe.grid(row=0, column=0, padx=1, pady=3, sticky=N+W+E)

    # heading
    w = Label(wframe)
    w['font'] =('Helvetica', 12)
    w['text'] = 'Robot Status'
    w['justify'] = CENTER
    w.grid(row=0, column=0, columnspan=9, sticky=E+W)

    width = 10
    row   = 1
    col   = 0

    # robot mode status
    var = StringVar()
    var.set("Auto mode")
    w = Entry(wframe)
    w['borderwidth'] = 2
    w['relief']   = 'flat'
    w['width']    = width
    w['textvar']  = var
    w['fg']       = fgColors['normal']
    w['state']    = 'readonly'
    w.grid(row=row, column=col, padx=0, pady=0, sticky=W+E)
    d = {'val': RobotMode.AUTO, 'var': var, 'w': w}
    self.m_robotStatus['mode'] = d

    col += 1

    # robot calibration status
    var = StringVar()
    var.set("Not calibrated")
    w = Entry(wframe)
    w['borderwidth'] = 2
    w['relief']   = 'flat'
    w['width']    = width
    w['textvar']  = var
    w['fg']       = fgColors['normal']
    w['state']    = 'readonly'
    w.grid(row=row, column=col, padx=0, pady=0, sticky=W+E)
    d = {'val': TriState.FALSE, 'var': var, 'w': w}
    self.m_robotStatus['calibration'] = d

    col += 1

    # robot motors status
    var = StringVar()
    var.set("Motors powered")
    w = Entry(wframe)
    w['borderwidth'] = 2
    w['relief']   = 'flat'
    w['width']    = width
    w['textvar']  = var
    w['fg']       = fgColors['normal']
    w['state']    = 'readonly'
    w.grid(row=row, column=col, padx=0, pady=0, sticky=W+E)
    d = {'val': TriState.ON, 'var': var, 'w': w}
    self.m_robotStatus['motors'] = d

    col += 1

    self.m_icons['led_dark']  = loadIcon("icons/icon_led_dark_16.png")
    self.m_icons['led_green'] = loadIcon("icons/icon_led_green_16.png")
    self.m_icons['led_red']   = loadIcon("icons/icon_led_red_16.png")

    # moving status
    w = Label(wframe)
    w['text']     = 'Moving'
    w['width']    = width
    w['justify']  = RIGHT
    w['anchor']   = E
    w['relief']   = 'flat'
    w.grid(row=row, column=col, sticky=E+W)
    d = {'val': None, 'var': None, 'w': w}
    self.m_robotStatus['moving_label'] = d

    col += 1

    # moving icon
    w = Label(wframe)
    w['image'] = self.m_icons['led_dark']
    w['justify'] = LEFT
    w.grid(row=row, column=col, sticky=W+E)
    d = {'val': TriState.OFF, 'var': None, 'w': w}
    self.m_robotStatus['moving_led'] = d

    col += 1

    # robot alarms status
    w = Label(wframe)
    w['text']     = 'Alarms'
    w['width']    = width
    w['justify']  = RIGHT
    w['anchor']   = E
    w['relief']   = 'flat'
    w.grid(row=row, column=col, sticky=E+W)
    d = {'val': None, 'var': None, 'w': w}
    self.m_robotStatus['alarms_label'] = d

    col += 1

    # alarms icon
    w = Label(wframe)
    w['image'] = self.m_icons['led_dark']
    w['justify'] = LEFT
    w.grid(row=row, column=col, sticky=W+E)
    d = {'val': TriState.OFF, 'var': None, 'w': w}
    self.m_robotStatus['alarms_led'] = d

    col += 1

    # robot estop status
    w = Label(wframe)
    w['text']     = 'EStop'
    w['width']    = width
    w['justify']  = RIGHT
    w['anchor']   = E
    w['relief']   = 'flat'
    w.grid(row=row, column=col, sticky=E)
    d = {'val': None, 'var': None, 'w': w}
    self.m_robotStatus['estop_label'] = d

    col += 1

    # estop icon
    w = Label(wframe)
    w['image'] = self.m_icons['led_dark']
    w['justify'] = LEFT
    w.grid(row=row, column=col, sticky=E)
    d = {'val': TriState.OFF, 'var': None, 'w': w}
    self.m_robotStatus['estop_led'] = d

  #
  ## \brief Adjust status panel fields to fill width of joint state panel
  ##
  ## \param totWidth  Total text width of joint state panel
  #
  def adjustWidthRobotStatusPanel(self, totWidth):
    width = (totWidth - 12) / 9
    self.m_robotStatus['mode']['w']['width'] = 2 * width
    self.m_robotStatus['calibration']['w']['width'] = 2 * width
    self.m_robotStatus['motors']['w']['width'] = 2 * width
    self.m_robotStatus['moving_label']['w']['width'] = width
    self.m_robotStatus['alarms_label']['w']['width'] = width
    self.m_robotStatus['estop_label']['w']['width'] = width

  #
  ## \brief Create joint state lower center panel headers.
  ##
  ## \param parent  Parent widget
  #
  def createJointStatePanelHdr(self, parent):
    wframe = Frame(parent)
    wframe['borderwidth'] = 2
    wframe['relief'] = 'ridge'
    wframe.grid(row=1, column=0, padx=1, pady=3, sticky=N+W+E)
    self.m_wJointStateFrame = wframe

    # heading
    w = Label(wframe)
    w['font'] =('Helvetica', 12)
    w['text'] = 'Joint State'
    w['anchor'] = CENTER
    w.grid(row=0, column=0, columnspan=10, sticky=E+W)

    width = 12
    padx  = 10

    # left column of labels
    w = Label(wframe, width=width, padx=padx, anchor=E, text='Joint:')
    w.grid(row=1, column=0, sticky=W)
    w = Label(wframe, width=width, padx=padx, anchor=E, text='Servo Id:')
    w.grid(row=2, column=0, sticky=W)
    w = Label(wframe, width=width, padx=padx, anchor=E, text='State:')
    w.grid(row=3, column=0, sticky=W)
    w = Label(wframe, width=width, padx=padx, anchor=E, text='Position(deg):')
    w.grid(row=4, column=0, sticky=W)
    w = Label(wframe, width=width, padx=padx, anchor=E, text='Odometer(ticks):')
    w.grid(row=5, column=0, sticky=W)
    w = Label(wframe, width=width, padx=padx, anchor=E, text='Encoder(ticks):')
    w.grid(row=6, column=0, sticky=W)
    w = Label(wframe, width=width, padx=padx, anchor=E, text='Velocity(%max):')
    w.grid(row=7, column=0, sticky=W)
    w = Label(wframe, width=width, padx=padx, anchor=E, text='Speed(raw):')
    w.grid(row=8, column=0, sticky=W)
    w = Label(wframe, width=width, padx=padx, anchor=E, text='Effort(raw):')
    w.grid(row=9, column=0, sticky=W)
    w = Label(wframe, width=width, padx=padx, anchor=E, text='Temperature(C):')
    w.grid(row=10, column=0, sticky=W)
    w = Label(wframe, width=width, padx=padx, anchor=E, text='Voltage(volts):')
    w.grid(row=11, column=0, sticky=W)
    w = Label(wframe, width=width, padx=padx, anchor=E, text='Alarms:')
    w.grid(row=12, column=0, sticky=W)

  #
  ## \brief Create joint state lower center panel state.
  ##
  ## \param joint   Joint state
  #
  def createJointStatePanel(self, joint):
    wframe = self.m_wJointStateFrame

    width = 12

    for i in range(0, len(joint.name)):
      name = joint.name[i]
      self.m_robotJoint[name] = {}

      col = 1 + i

      # joint
      w = Label(wframe, anchor=W, text=name)
      w['width'] = width
      w.grid(row=1, column=col, sticky=W)

      # master servo id
      var = IntVar()
      var.set(ord(joint.master_servo_id[i]))
      w = Entry(wframe, relief='flat', justify=LEFT, textvar=var,
                        fg=fgColors['normal'], state='readonly')
      w['width'] = width
      w.grid(row=2, column=col, padx=1, pady=0, sticky=W)
      d = {'var': var, 'w': w}
      self.m_robotJoint[name]['servo_id'] = d
      self.m_robotServo[ord(joint.master_servo_id[i])] = name
    
      # joint state
      var = StringVar()
      w = Entry(wframe, relief='flat', justify=LEFT, textvar=var,
                        fg=fgColors['normal'], state='readonly')
      w['width'] = width
      w.grid(row=3, column=col, padx=1, pady=0, sticky=W)
      d = {'var': var, 'w': w}
      self.m_robotJoint[name]['state'] = d
    
      # position
      var = DoubleVar()
      var.set(0.0)
      w = Entry(wframe, relief='flat', justify=LEFT, textvar=var,
                        fg=fgColors['normal'], state='readonly')
      w['width'] = width
      w.grid(row=4, column=col, padx=1, pady=0, sticky=W)
      d = {'var': var, 'w': w}
      self.m_robotJoint[name]['position'] = d
    
      # odometer
      var = IntVar()
      var.set(0)
      w = Entry(wframe, relief='flat', justify=LEFT, textvar=var,
                        fg=fgColors['normal'], state='readonly')
      w['width'] = width
      w.grid(row=5, column=col, padx=1, pady=0, sticky=W)
      d = {'var': var, 'w': w}
      self.m_robotJoint[name]['odometer'] = d
    
      # encoder
      var = IntVar()
      var.set(0)
      w = Entry(wframe, relief='flat', justify=LEFT, textvar=var,
                        fg=fgColors['normal'], state='readonly')
      w['width'] = width
      w.grid(row=6, column=col, padx=1, pady=0, sticky=W)
      d = {'var': var, 'w': w}
      self.m_robotJoint[name]['encoder'] = d
    
      # velocity
      var = DoubleVar()
      var.set(0.0)
      w = Entry(wframe, relief='flat', justify=LEFT, textvar=var,
                        fg=fgColors['normal'], state='readonly')
      w['width'] = width
      w.grid(row=7, column=col, padx=1, pady=0, sticky=W)
      d = {'var': var, 'w': w}
      self.m_robotJoint[name]['velocity'] = d
    
      # raw speed
      var = IntVar()
      var.set(0)
      w = Entry(wframe, relief='flat', justify=LEFT, textvar=var,
                        fg=fgColors['normal'], state='readonly')
      w['width'] = width
      w.grid(row=8, column=col, padx=1, pady=0, sticky=W)
      d = {'var': var, 'w': w}
      self.m_robotJoint[name]['speed'] = d
    
      # raw effort
      var = IntVar()
      var.set(0)
      w = Entry(wframe, relief='flat', justify=LEFT, textvar=var,
                        fg=fgColors['normal'], state='readonly')
      w['width'] = width
      w.grid(row=9, column=col, padx=1, pady=0, sticky=W)
      d = {'var': var, 'w': w}
      self.m_robotJoint[name]['effort'] = d
    
      # temperature
      var = IntVar()
      var.set(0)
      w = Entry(wframe, relief='flat', justify=LEFT, textvar=var,
                        fg=fgColors['normal'], state='readonly')
      w['width'] = width
      w.grid(row=10, column=col, padx=1, pady=0, sticky=W)
      d = {'var': var, 'w': w}
      self.m_robotJoint[name]['temperature'] = d
    
      # voltage
      var = DoubleVar()
      var.set(0.0)
      w = Entry(wframe, relief='flat', justify=LEFT, textvar=var,
                        fg=fgColors['normal'], state='readonly')
      w['width'] = width
      w.grid(row=11, column=col, padx=1, pady=0, sticky=W)
      d = {'var': var, 'w': w}
      self.m_robotJoint[name]['voltage'] = d
    
      # alarms
      var = StringVar()
      var.set("ok")
      w = Entry(wframe, relief='flat', justify=LEFT, textvar=var,
                            fg=fgColors['ok'], state='readonly')
      w['width'] = width
      w.grid(row=12, column=col, padx=1, pady=0, sticky=W)
      d = {'var': var, 'w': w}
      self.m_robotJoint[name]['alarms'] = d

    # left labels column width + pading + number of joints * column width
    totWidth = 12 + 10 + len(joint.name) * width

    self.adjustWidthRobotStatusPanel(totWidth)
    
  #
  ## \brief Create gui right hand side buttons.
  #
  def createRightButtons(self):
    wframe = Frame(self)
    wframe['borderwidth'] = 2
    wframe['relief'] = 'ridge'
    wframe.grid(row=1, column=2, padx=1, pady=3, sticky=N+W+E)

    # estop
    w = self.createButton(wframe, "ESTOP", "icons/icon_estop.png", self.estop,
                                  fg='red')
    w.grid(row=0, column=0, sticky=N+E+W)
    self.m_icons['estop_reset'] = loadIcon("icons/icon_estop_reset.png")

    # freeze
    w = self.createButton(wframe, "Freeze",
                                  "icons/icon_pause.png", self.freezeArm)
    w.grid(row=1, column=0, sticky=N+E+W)
    self.m_keysModeDeps.append('freeze')

    # release
    w = self.createButton(wframe, "Release",
                                  "icons/icon_stop.png", self.releaseArm)
    w.grid(row=2, column=0, sticky=N+E+W)
    self.m_keysModeDeps.append('release')

    # settings
    w = self.createButton(wframe, "Settings",
                                  "icons/icon_settings.png", self.settings)
    w.grid(row=3, column=0, sticky=N+E+W)

    # info
    w = self.createButton(wframe, "About",
                                  "icons/icon_info.png", self.about)
    w.grid(row=4, column=0, sticky=N+E+W)

    # quit
    w = self.createButton(wframe, "Quit", "icons/icon_exit.png", self.destroy,
                                  fg='red')
    w.grid(row=5, column=0, sticky=N+E+W)

  #
  ## \brief Create gui status bar at bottom of gui window.
  #
  def createStatusBar(self):
    wframe = Frame(self)
    wframe['borderwidth'] = 2
    wframe['relief'] = 'ridge'
    wframe.grid(row=2, column=0, columnspan=3, padx=1, pady=3, sticky=N+W+E)

    self.m_varStatus = StringVar()
    self.m_varStatus.set("Calibration required.")
    self.m_wStatusBar = Entry(wframe)
    self.m_wStatusBar['width']    = wframe['width']
    self.m_wStatusBar['relief']   = 'flat'
    self.m_wStatusBar['textvar']  = self.m_varStatus
    self.m_wStatusBar['fg']       = fgColors['normal']
    self.m_wStatusBar['state']    = 'readonly'
    self.m_wStatusBar.grid(row=0, column=0, padx=3, pady=3, sticky=W+E)

  #
  ## \brief Create button.
  ##
  ## \param parent    Parent widget.
  ## \param text      Button text.
  ## \param imagefile Image file name. None for no image.
  ## \param command   Callback for button push.
  ## \param fg        Foreground text color.
  ##
  ## \return Button widget.
  #
  def createButton(self, parent, text, imagefile, command, fg='black'):
    key = str.lower(text.replace("\n", "_"))
    self.m_icons[key] = loadIcon(imagefile)
    w = Button(parent)
    w['text']     = text
    if self.m_icons[key]:
      w['image']    = self.m_icons[key]
      w['compound'] = LEFT
      w['padx']     = 0
      w['pady']     = 0
      w['anchor']   = W
      w['width']    = 105
    else:
      w['anchor']   = CENTER
      w['width']    = 10
    w['fg']       = fg
    w['command']  = command
    self.m_wBttn[key] = w
    return self.m_wBttn[key]

  #
  ## \brief Destroy window callback.
  #
  def destroy(self):
    self.quit()

  #
  ## \brief (Cancel) calibration callback.
  #
  def calibrate(self):
    # not calibrating - so start calibration
    if not self.m_calibState['calibrating']:
      if self.m_config['warn_on_calib']:
        dlg = warnDlg(master=self,
                      image="HekaterosZeroPt128.png",
                      msg="""\
For best calibration, place the Hekateros near the zero point.
Make sure the workspace is clear of obstructions.""")
        if not dlg.m_result:
          return
      self.m_calibState['calibrating'] = True
      self.m_wBttn['calibrate']['image'] = self.m_icons['calibrate_cancel']
      self.m_wBttn['calibrate']['text'] = "Cancel\nCalibrate"
      self.showInfo("Calibrating Hekateros.")
      self.update_idletasks()

      # create calibration action client
      if self.m_calibState['ac'] is None:
        self.m_calibState['ac'] = calibrate_ac()

      # start calibration
      if not self.m_calibState['ac'].exec_calib(self.calibrate_monitor):
        self.showError("Could not execute calibration. " \
                       "Is the hekateros_control node running?")
        self.calibrate_cancel()

      # check for completion
      else:
        self.m_calibState['id'] = self.after(100, self.calibrate_check_for_done)

    # calibrating - so cancel
    else:
      self.calibrate_cancel()
      self.showInfo("Calibration canceled.")
      
  #
  ## \brief Cancel calibration, setting data and widget state accordingly.
  #
  def calibrate_cancel(self):
      self.m_calibState['ac'].cancel()
      self.m_calibState['calibrating'] = False
      self.m_wBttn['calibrate']['image'] = self.m_icons['calibrate']
      self.m_wBttn['calibrate']['text'] = "Calibrate"
      if self.m_calibState['id'] != 0:
        self.m_calibState['id'] = 0
      self.update_idletasks()

  #
  ## \brief Check if calibration is complete.
  #
  def calibrate_check_for_done(self):
    if self.m_calibState['ac'].get_action_state() < 3:
      self.m_calibState['id'] = self.after(100, self.calibrate_check_for_done)
    else:
      self.m_wBttn['calibrate']['image'] = self.m_icons['calibrate']
      self.showInfo("Hekateros calibration complete.")
      self.m_calibState['id'] = 0
      self.update_idletasks()

  #
  ## @brief monitor the calibration feedback
  #
  def calibrate_monitor(self, fb):
    self.showJointStates(fb.joint)
  
  #
  ## \brief Go to parked position callback.
  #
  def gotoParkedPos(self):
    try:
      rospy.wait_for_service("hekateros_control/goto_parked", timeout=1)
    except rospy.ROSException, e:
      self.showError('Goto parked position: ' + e.message + '.')
      return
    try:
      goto_parked_pos = rospy.ServiceProxy('hekateros_control/goto_parked', 
                                        GotoParkedPos)
      goto_parked_pos()
    except rospy.ServiceException, e:
      self.showError("Goto parked position request failed: %s." % (e.message))
      return
    self.showInfo("Parked.")
  
  #
  ## \brief Go to balanced position callback.
  #
  def gotoBalancedPos(self):
    try:
      rospy.wait_for_service("hekateros_control/goto_balanceded", timeout=1)
    except rospy.ROSException, e:
      self.showError('Goto balanced position: ' + e.message + '.')
      return
    try:
      goto_balanced_pos = rospy.ServiceProxy(
                                        'hekateros_control/goto_balanced', 
                                        GotoBalancedPos)
      goto_balanced_pos()
    except rospy.ServiceException, e:
      self.showError("Goto balanced position request failed: %s." % (e.message))
      return
    self.showInfo("Balanced.")
  
  #
  ## \brief Go to zero point position callback.
  #
  def gotoZeroPt(self):
    try:
      rospy.wait_for_service("hekateros_control/goto_zero", timeout=1)
    except rospy.ROSException, e:
      self.showError('Goto zero point: ' + e.message + '.')
      return
    try:
      goto_zero_pt = rospy.ServiceProxy('hekateros_control/goto_zero', 
                                        GotoZeroPt)
      goto_zero_pt()
    except rospy.ServiceException, e:
      self.showError("Goto zero point failed: %s." % (e.message))
      return
    self.showInfo("Zero point.")
  
  #
  ## \brief Open gripper callback.
  #
  def openGripper(self):
    try:
      rospy.wait_for_service("hekateros_control/open_gripper", timeout=1)
    except rospy.ROSException, e:
      self.showError('Open gripper: ' + e.message + '.')
      return
    try:
      open_gripper = rospy.ServiceProxy('hekateros_control/open_gripper', 
                                        OpenGripper)
      open_gripper()
    except rospy.ServiceException, e:
      self.showError("Open grippper request failed: %s." % (e.message))
      return
    self.showInfo("Gripper opened.")
  

  #
  ## \brief Close gripper callback.
  #
  def closeGripper(self):
    try:
      rospy.wait_for_service("hekateros_control/close_gripper", timeout=1)
    except rospy.ROSException, e:
      self.showError('Close gripper: ' + e.message + '.')
      return
    try:
      close_gripper = rospy.ServiceProxy('hekateros_control/close_gripper',
                                          CloseGripper)
      close_gripper()
    except rospy.ServiceException, e:
      self.showError("Close grippper request failed: %s." % (e.message))
      return
    self.showInfo("Gripper closed.")

  #
  ## \brief (Reset) emergency stop callback.
  #
  def estop(self):
    if self.m_robotStatus['estop_led']['val'] == TriState.FALSE:
      self.showResetEStop()
      try:
        rospy.wait_for_service("hekateros_control/estop", timeout=1)
      except rospy.ROSException, e:
        self.showError('Emergency stop: ' + e.message + '.')
        self.showEStop()
        return
      try:
        estop = rospy.ServiceProxy('hekateros_control/estop',
                                          EStop)
        estop()
      except rospy.ServiceException, e:
        self.showError("Emergency stop request failed: %s." % (e.message))
        self.showEStop()
        return
      self.showError("Hekateros emergency stopped.")
    else:
      self.showEStop()
      try:
        rospy.wait_for_service("hekateros_control/reset_estop", timeout=1)
      except rospy.ROSException, e:
        self.showError('Reset emergency stop: ' + e.message + '.')
        self.showResetEStop()
        return
      try:
        reset_estop = rospy.ServiceProxy('hekateros_control/reset_estop',
                                          ResetEStop)
        reset_estop()
      except rospy.ServiceException, e:
        self.showError("Reset emergency stop request failed: %s." % (e.message))
        self.showResetEStop()
        return
      self.showError("Hekateros emergency stop has been reset.")
  
  #
  ## \brief Show estop button.
  #
  def showEStop(self):
    self.m_wBttn['estop']['image'] = self.m_icons['estop']
    self.m_wBttn['estop']['text']   = "ESTOP"
    self.m_wBttn['estop']['fg']     = fgColors['error']
    self.update_idletasks()

  #
  ## \brief Show reset estop button.
  #
  def showResetEStop(self):
    self.m_wBttn['estop']['image']  = self.m_icons['estop_reset']
    self.m_wBttn['estop']['text']   = "Reset\nESTOP"
    self.m_wBttn['estop']['fg']     = fgColors['normal']
    self.update_idletasks()

  #
  ## \brief Freeze arm callback.
  #
  def freezeArm(self):
    try:
      rospy.wait_for_service("hekateros_control/freeze", timeout=1)
    except rospy.ROSException, e:
      self.showError('Freeze arm: ' + e.message + '.')
      return
    try:
      freeze = rospy.ServiceProxy('hekateros_control/freeze', Freeze)
      freeze()
    except rospy.ServiceException, e:
      self.showError("Freeze arm request failed: %s." % (e.message))
      return
    self.showInfo("Hekateros has been frozen at current position.")

  #
  ## \brief Release arm callback.
  #
  def releaseArm(self):
    if self.m_config['warn_on_release']:
      dlg = warnDlg(master=self,
                    image="HekFalling.png",
                    msg="""\
The Hekateros motros will become unpowered.
The arm may fall if not in a stable position.""")
      if not dlg.m_result:
        return
    try:
      rospy.wait_for_service("hekateros_control/release", timeout=1)
    except rospy.ROSException, e:
      self.showError('Release arm: ' + e.message + '.')
      return
    try:
      freeze = rospy.ServiceProxy('hekateros_control/release', Freeze)
      freeze()
    except rospy.ServiceException, e:
      self.showError("Release arm request failed: %s." % (e.message))
      return
    self.showInfo("Hekateros has been release, motors are unpowered.")
  
  #
  ## \brief Open settings dialog callback.
  #
  def settings(self):
    pass
  
  #
  ## \brief Show about dialog callback.
  #
  def about(self):
    prodInfo = None
    try:
      rospy.wait_for_service("hekateros_control/get_product_info", timeout=1)
    except rospy.ROSException, e:
      self.showError('Get product info: ' + e.message + '.')
    else:
      try:
        get_product_info = rospy.ServiceProxy(
                                          'hekateros_control/get_product_info',
                                          GetProductInfo)
        rsp = get_product_info()
        prodInfo = rsp.i
      except rospy.ServiceException, e:
        self.showError("Get product info request failed: %s." % (e.message))
    dlg = aboutDlg(master=self, info=prodInfo)
  
  #
  ## \brief Update robot status.
  ##
  ## \param status  Robot status extended message.
  #
  def updateRobotStatus(self, status):
    self.showRobotStatus(status)

    # first update of joint state required first
    if len(self.m_robotJoint) > 0:
      self.showServoHealth(status.servo_health)

  #
  ## \brief Update joint state.
  ##
  ## \param joint  Joint state extended message.
  #
  def updateJointStates(self, joint):
    # no joints
    if len(joint.name) == 0:
      return

    # first state message, 
    if len(self.m_robotJoint) == 0:
      self.createJointStatePanel(joint)

    self.showJointStates(joint)

  #
  ## \brief Show robot status.
  ##
  ## \param status  Robot status extended message.
  #
  def showRobotStatus(self, status):
    key = 'mode'
    if self.m_robotStatus[key]['val'] != status.mode:
      text, fg = self.toRobotMode(status.mode)
      self.m_robotStatus[key]['val'] = status.mode
      self.showEntry(self.m_robotStatus[key]['w'],
                     self.m_robotStatus[key]['var'], text, fg)

    key = 'calibration'
    if self.m_robotStatus[key]['val'] != status.is_calibrated:
      text, fg = self.toCalib(status.is_calibrated)
      self.m_robotStatus[key]['val'] = status.is_calibrated
      self.showEntry(self.m_robotStatus[key]['w'],
                     self.m_robotStatus[key]['var'], text, fg)

    key = 'motors'
    if self.m_robotStatus[key]['val'] != status.drives_powered:
      text, fg = self.toMotorsPowered(status.drives_powered)
      self.m_robotStatus[key]['val'] = status.drives_powered
      self.showEntry(self.m_robotStatus[key]['w'],
                     self.m_robotStatus[key]['var'], text, fg)

    key = 'moving_led'
    if self.m_robotStatus[key]['val'] != status.in_motion:
      self.m_robotStatus[key]['val'] = status.in_motion
      if status.in_motion == TriState.ON:
        self.m_robotStatus[key]['w']['image'] = self.m_icons['led_green'] 
      else:
        self.m_robotStatus[key]['w']['image'] = self.m_icons['led_dark'] 

    key = 'alarms_led'
    if self.m_robotStatus[key]['val'] != status.in_error:
      self.m_robotStatus[key]['val'] = status.in_error
      if status.in_error == TriState.TRUE:
        self.m_robotStatus[key]['w']['image'] = self.m_icons['led_red'] 
      else:
        self.m_robotStatus[key]['w']['image'] = self.m_icons['led_dark'] 

    key = 'estop_led'
    if self.m_robotStatus[key]['val'] != status.e_stopped:
      self.m_robotStatus[key]['val'] = status.e_stopped
      if status.e_stopped == TriState.TRUE:
        self.m_robotStatus[key]['w']['image'] = self.m_icons['led_red'] 
      else:
        self.m_robotStatus[key]['w']['image'] = self.m_icons['led_dark'] 

  #
  ## \brief Show joint state.
  ##
  ## \param joint  Joint state extended message.
  #
  def showJointStates(self, joint):
    for i in range(0, len(joint.name)):
      name = joint.name[i]
      if not self.m_robotJoint.has_key(name):
        continue

      key = 'state'
      val, fg = self.toJointState(joint.op_state[i].calib_state)
      if self.m_robotJoint[name][key]['var'].get() != val:
        self.showEntry(self.m_robotJoint[name][key]['w'],
                     self.m_robotJoint[name][key]['var'], val, fg)

      key = 'position'
      val, fg = self.toDeg(joint.position[i])
      if self.m_robotJoint[name][key]['var'].get() != val:
        self.showEntry(self.m_robotJoint[name][key]['w'],
                     self.m_robotJoint[name][key]['var'], val, fg)

      key = 'odometer'
      val = joint.odometer_pos[i]
      if self.m_robotJoint[name][key]['var'].get() != val:
        self.showEntry(self.m_robotJoint[name][key]['w'],
                     self.m_robotJoint[name][key]['var'],
                     val, fgColors['normal'])

      key = 'encoder'
      val = joint.encoder_pos[i]
      if self.m_robotJoint[name][key]['var'].get() != val:
        self.showEntry(self.m_robotJoint[name][key]['w'],
                     self.m_robotJoint[name][key]['var'],
                     val, fgColors['normal'])

      key = 'velocity'
      val, fg = self.toVelocity(joint.velocity[i])
      if self.m_robotJoint[name][key]['var'].get() != val:
        self.showEntry(self.m_robotJoint[name][key]['w'],
                     self.m_robotJoint[name][key]['var'], val, fg)

      key = 'speed'
      val = joint.raw_speed[i]
      if self.m_robotJoint[name][key]['var'].get() != val:
        self.showEntry(self.m_robotJoint[name][key]['w'],
                     self.m_robotJoint[name][key]['var'],
                     val, fgColors['normal'])

      key = 'effort'
      val, fg = self.toEffort(joint.effort[i])
      if self.m_robotJoint[name][key]['var'].get() != val:
        self.showEntry(self.m_robotJoint[name][key]['w'],
                     self.m_robotJoint[name][key]['var'], val, fg)

  #
  ## \brief Show servo health.
  ##
  ## \param health  Servo health message.
  #
  def showServoHealth(self, health):
    for i in range(0, len(health)):
      servo_id = health[i].servo_id
      if not self.m_robotServo.has_key(servo_id):
        continue

      name = self.m_robotServo[servo_id]

      key = 'temperature'
      val = int(health[i].temp)
      if self.m_robotJoint[name][key]['var'].get() != val:
        fg = self.toTemperatureColor(val)
        self.showEntry(self.m_robotJoint[name][key]['w'],
                       self.m_robotJoint[name][key]['var'], val, fg)

      key = 'voltage'
      val = health[i].voltage
      if self.m_robotJoint[name][key]['var'].get() != val:
        fg = self.toVoltageColor(val)
        self.showEntry(self.m_robotJoint[name][key]['w'],
                       self.m_robotJoint[name][key]['var'], val, fg)

      key = 'alarms'
      val, fg = self.toAlarms(health[i].alarm)
      if self.m_robotJoint[name][key]['var'].get() != val:
        self.showEntry(self.m_robotJoint[name][key]['w'],
                       self.m_robotJoint[name][key]['var'], val, fg)

  #
  ## \brief Show information message on status bar.
  ##
  ## \param msg   Info message string.
  #
  def showInfo(self, msg):
    self.m_wStatusBar["state"] = "normal"
    self.m_wStatusBar["fg"]    = fgColors['normal']
    self.m_varStatus.set(msg)
    self.m_wStatusBar["state"] = "readonly"

  #
  ## \brief Show error message on status bar.
  ##
  ## \param msg   Error message string.
  #
  def showError(self, msg):
    self.m_wStatusBar["state"] = "normal"
    self.m_wStatusBar["fg"]    = fgColors['error']
    self.m_varStatus.set(msg)
    self.m_wStatusBar["state"] = "readonly"

  #
  ## \brief Show text on read-only entry.
  ##
  ## \param w     Entry widget.
  ## \param var   Bound entry variable.
  ## \param val   Variable value.
  ## \param fg    Text foreground color.
  #
  def showEntry(self, w, var, val, fg='black'):
    w['state'] = 'normal'
    w['fg']    = fg
    var.set(val)
    w['state'] = 'readonly'

  def toRobotMode(self, mode):
    if mode == RobotMode.MANUAL:
      return ("Manual mode", fgColors['normal'])
    elif mode == RobotMode.AUTO:
      return ("Auto mode", fgColors['normal'])
    else:
      return (repr(mode), fgColors['error'])

  def toCalib(self, tristate):
    if tristate == TriState.FALSE:
      return ("Not calibrated", fgColors['normal'])
    elif tristate == TriState.TRUE:
      return ("Calibrated", fgColors['normal'])
    else:
      return (repr(tristate), fgColors['error'])

  def toMotorsPowered(self, tristate):
    if tristate == TriState.FALSE:
      return ("Motors unpowered", fgColors['normal'])
    elif tristate == TriState.TRUE:
      return ("Motors powered", fgColors['normal'])
    else:
      return (repr(tristate), fgColors['error'])

  def toJointState(self, opstate):
      if opstate == HekOpState.UNCALIBRATED:
        return ("uncalibrated", fgColors['normal'])
      elif opstate == HekOpState.CALIBRATING:
        return ("calibrating", fgColors['focus'])
      elif opstate == HekOpState.CALIBRATED:
        return ("calibrated", fgColors['normal'])
      else:
        return (repr(opstate), fgColors['error'])

  def toDeg(self, rad):
    deg = math.degrees(rad)
    return math.floor(deg * 100.0) / 100.0, fgColors['normal']

  def toVelocity(self, percent):
    return math.floor(percent * 10.0) / 10.0, fgColors['normal']

  def toEffort(self, effort):
    absraw = math.fabs(effort)
    raw    = int(effort)
    if absraw < 900:
      return (raw, fgColors['normal'])
    elif absraw < 1000:
      return (raw, fgColors['warning'])
    else:
      return (raw, fgColors['error'])

  def toTemperatureColor(self, temp):
    if temp >= 75:
      return fgColors['error']
    elif temp >= 60:
      return fgColors['warning']
    else:
      return fgColors['normal']

  def toVoltageColor(self, volts):
    if volts >= 10.5 and volts <= 12.5:
      return fgColors['normal']
    elif volts >= 9.5 and volts <= 13.5:
      return fgColors['warning']
    else:
      return fgColors['error']

  def toAlarms(self, alarms):
    if alarms == ServoHealth.ALARM_NONE:
      return (alarmStrings[ServoHealth.ALARM_NONE], fgColors['ok'])
    text = ""
    sep  = ""
    for bit in alarmStrings.keys():
      if bit & alarms:
        if len(alarmStrings[bit]) > 0:
          text += sep + alarmStrings[bit]
          sep = ','
    return (text, fgColors['error'])

# ------------------------------------------------------------------------------
# Exception Class usage
# ------------------------------------------------------------------------------

##
## \brief Unit test command-line exception class.
##
## Raise usage excpetion.
##
class usage(Exception):

  ##
  ## \brief Constructor.
  ##
  ## \param msg   Error message string.
  ##
  def __init__(self, msg):
    ## error message attribute
    self.msg = msg


# ------------------------------------------------------------------------------
# Class application
# ------------------------------------------------------------------------------

##
## \brief Hekateros control panel.
##
class application():

  #
  ## \brief Constructor.
  #
  def __init__(self):
    self._Argv0 = __file__
    self.m_win = None

  #
  ## \brief Print usage error.
  ##
  ## \param emsg  Error message string.
  #
  def printUsageErr(self, emsg):
    if emsg:
      print "%s: %s" % (self._Argv0, emsg)
    else:
      print "%s: error" % (self._Argv0)
    print "Try '%s --help' for more information." % (self._Argv0)

  ## \brief Print Command-Line Usage Message.
  def printUsage(self):
    print \
"""
usage: %s [OPTIONS] <image_dir>

     %s --help

Options and arguments:

-h, --help                : Display this help and exit.
"""  % (self._Argv0, self._Argv0)
 
  #
  ## \brief Get command-line options
  ##  
  ## \param argv          Argument list. If not None, then overrides
  ##                      command-line arguments.
  ## \param [out] kwargs  Keyword argument list.  
  ##
  ## \return Parsed keyword arguments.
  #
  def getOptions(self, argv=None, **kwargs):
    if argv is None:
      argv = sys.argv

    self._Argv0 = kwargs.get('argv0', __file__)

    # defaults
    kwargs['debug'] = 0

    # parse command-line options
    try:
      opts, args = getopt.getopt(argv[1:], "?h",
          ['help', ''])
    except getopt.error, msg:
      raise usage(msg)
    for opt, optarg in opts:
      if opt in ('-h', '--help', '-?'):
        self.printUsage()
        sys.exit(0)

    #if len(args) < 1:
    #  self.printUsageErr("No input xml file specified")
    #  sys.exit(2)
    #else:
    #  kwargs['filename'] = args[0]

    return kwargs

  #
  ## \brief Initialize interface to hek_robot.
  #
  def initRobot(self):
    self.m_win.showInfo("Initializing interface to Hekateros.")

    rospy.init_node("hek_panel")

    # subscribe to extended robot status data
    rospy.Subscriber("hekateros_control/robot_status_ex", 
                     HekRobotStatusExtended, 
                     self.updateRobotStatus) 

    # subscribe to extended joint state data
    rospy.Subscriber("hekateros_control/joint_states_ex", 
                     HekJointStateExtended, 
                     self.updateJointStates) 

    self.m_win.showInfo("Hekateros interface initialized.")

  #
  ## \brief Received robot extended status message callback.
  ##
  ## \param msg   Received message.
  #
  def updateRobotStatus(self, msg):
    self.m_win.updateRobotStatus(msg)

  #
  ## \brief Received joint extended state message callback.
  ##
  ## \param msg   Received message.
  #
  def updateJointStates(self, msg):
    self.m_win.updateJointStates(msg)

  #
  ## \brief Run application.
  ##    
  ## \param argv    Optional argument list to override command-line arguments.
  ## \param kwargs  Optional keyword argument list.
  ##
  ## \return Exit code.
  #
  def run(self, argv=None, **kwargs):
  
    # parse command-line options and arguments
    kwargs = self.getOptions(argv, **kwargs)

    # create root 
    root = Tk()

    # create application window
    self.m_win = window(master=root)

    root.protocol('WM_DELETE_WINDOW', root.destroy)

    # initialize robot interface
    self.initRobot()

    # go for it
    self.m_win.mainloop()

    return 0


# ------------------------------------------------------------------------------
# main
# ------------------------------------------------------------------------------
if __name__ == '__main__':
  app = application();
  sys.exit( app.run() );
